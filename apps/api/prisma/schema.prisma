generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  avatarUrl    String?  @map("avatar_url")
  passwordHash String?  @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_cat")
  updatedAt    DateTime @updatedAt @map("updated_at")

  accounts      Account[]
  member_on     Member[]
  owns_teams    Team[]
  owns_projects Project[]
  invites       Invite[]
  tokens        Token[]

  @@map("users")
}

enum AccountProvider {
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Team {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  projects Project[]
  members  Member[]
  invites  Invite[]

  @@map("teams")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([teamId, userId])
  @@map("members")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  @@map("projects")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  @@unique([email, teamId])
  @@index([email])
  @@map("invites")
}
